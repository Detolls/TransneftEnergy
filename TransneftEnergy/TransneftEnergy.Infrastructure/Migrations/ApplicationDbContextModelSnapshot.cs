// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TransneftEnergy.Infrastructure.Data;

#nullable disable

namespace TransneftEnergy.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.ChildOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ParentOrganizationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentOrganizationId");

                    b.ToTable("ChildOrganizations");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.ConsumptionObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChildOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ChildOrganizationId");

                    b.ToTable("ConsumptionObjects");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.CurrentTransformer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("TransformationRatio")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CurrentTransformers");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.ElectricityMeasuringPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsumptionObjectId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentTransformerId")
                        .HasColumnType("int");

                    b.Property<int>("ElectricityMeterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("VoltageTransformerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsumptionObjectId");

                    b.HasIndex("CurrentTransformerId")
                        .IsUnique();

                    b.HasIndex("ElectricityMeterId")
                        .IsUnique();

                    b.HasIndex("VoltageTransformerId")
                        .IsUnique();

                    b.ToTable("ElectricityMeasuringPoints");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.ElectricityMeasuringPointsSettlementMeters", b =>
                {
                    b.Property<int>("ElectricityMeasuringPointId")
                        .HasColumnType("int");

                    b.Property<int>("SettlementMeterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ElectricityMeasuringPointId", "SettlementMeterId", "StartTime", "EndTime");

                    b.HasIndex("SettlementMeterId");

                    b.ToTable("ElectricityMeasuringPointsSettlementMeters");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.ElectricityMeter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ElectricityMeters");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.ElectricitySupplyPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsumptionObjectId")
                        .HasColumnType("int");

                    b.Property<double>("MaxPower")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ConsumptionObjectId");

                    b.ToTable("ElectricitySupplyPoints");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.SettlementMeter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ElectricitySupplyPointId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ElectricitySupplyPointId");

                    b.ToTable("SettlementMeters");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.VoltageTransformer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("TransformationRatio")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("VoltageTransformers");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.ChildOrganization", b =>
                {
                    b.HasOne("TransneftEnergy.Domain.Entities.Organization", "ParentOrganization")
                        .WithMany("ChildOrganizations")
                        .HasForeignKey("ParentOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentOrganization");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.ConsumptionObject", b =>
                {
                    b.HasOne("TransneftEnergy.Domain.Entities.ChildOrganization", "ChildOrganization")
                        .WithMany()
                        .HasForeignKey("ChildOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChildOrganization");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.ElectricityMeasuringPoint", b =>
                {
                    b.HasOne("TransneftEnergy.Domain.Entities.ConsumptionObject", "ConsumptionObject")
                        .WithMany("ElectricityMeasuringPoints")
                        .HasForeignKey("ConsumptionObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransneftEnergy.Domain.Entities.CurrentTransformer", "CurrentTransformer")
                        .WithOne("ElectricityMeasuringPoint")
                        .HasForeignKey("TransneftEnergy.Domain.Entities.ElectricityMeasuringPoint", "CurrentTransformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransneftEnergy.Domain.Entities.ElectricityMeter", "ElectricityMeter")
                        .WithOne("ElectricityMeasuringPoint")
                        .HasForeignKey("TransneftEnergy.Domain.Entities.ElectricityMeasuringPoint", "ElectricityMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransneftEnergy.Domain.Entities.VoltageTransformer", "VoltageTransformer")
                        .WithOne("ElectricityMeasuringPoint")
                        .HasForeignKey("TransneftEnergy.Domain.Entities.ElectricityMeasuringPoint", "VoltageTransformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsumptionObject");

                    b.Navigation("CurrentTransformer");

                    b.Navigation("ElectricityMeter");

                    b.Navigation("VoltageTransformer");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.ElectricityMeasuringPointsSettlementMeters", b =>
                {
                    b.HasOne("TransneftEnergy.Domain.Entities.ElectricityMeasuringPoint", "ElectricityMeasuringPoint")
                        .WithMany()
                        .HasForeignKey("ElectricityMeasuringPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransneftEnergy.Domain.Entities.SettlementMeter", "SettlementMeter")
                        .WithMany()
                        .HasForeignKey("SettlementMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElectricityMeasuringPoint");

                    b.Navigation("SettlementMeter");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.ElectricitySupplyPoint", b =>
                {
                    b.HasOne("TransneftEnergy.Domain.Entities.ConsumptionObject", "ConsumptionObject")
                        .WithMany("ElectricitySupplyPoints")
                        .HasForeignKey("ConsumptionObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsumptionObject");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.SettlementMeter", b =>
                {
                    b.HasOne("TransneftEnergy.Domain.Entities.ElectricitySupplyPoint", "ElectricitySupplyPoint")
                        .WithMany("SettlementMeters")
                        .HasForeignKey("ElectricitySupplyPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElectricitySupplyPoint");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.ConsumptionObject", b =>
                {
                    b.Navigation("ElectricityMeasuringPoints");

                    b.Navigation("ElectricitySupplyPoints");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.CurrentTransformer", b =>
                {
                    b.Navigation("ElectricityMeasuringPoint");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.ElectricityMeter", b =>
                {
                    b.Navigation("ElectricityMeasuringPoint");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.ElectricitySupplyPoint", b =>
                {
                    b.Navigation("SettlementMeters");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.Organization", b =>
                {
                    b.Navigation("ChildOrganizations");
                });

            modelBuilder.Entity("TransneftEnergy.Domain.Entities.VoltageTransformer", b =>
                {
                    b.Navigation("ElectricityMeasuringPoint");
                });
#pragma warning restore 612, 618
        }
    }
}
